#!/bin/bash
#
### BEGIN INIT INFO
# Provides:       pywwetha 
# Required-Start: $remote_fs
# Required-Stop:  $remote_fs
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Description:    Simple webserver for static html and CGI
### END INIT INFO
PATH=$PATH:/bin:/sbin:/usr/sbin

VERBOSE=-v
BIN=/usr/share/pywwetha/source/pywwetha.py
CONFIG=/etc/pywwetha/pywwetha.conf

function addHost(){
	VHOST=$1
	F=/etc/hosts
	for port in {86..255} ; do
		if ! grep -q "^127[.]0[.]0[.]$port[^0-9]" $F ; then
			echo -e "\n127.0.0.$port $VHOST" >>$F
			echo "Virtual host $VHOST installed: $port"
			break;
		fi
	done
}

function getPid() {
	pid=$(ps aux | perl -ne 'print $1 if /^\S+\s+(\d+).*python.*pywwetha\.py/')
	echo $pid
}

function start() {
  pid=$(getPid)
  if [ -n "$pid" ] ; then
  	echo "pywwetha is still running: .$pid."
  else
      FN=/tmp/pywwetha.log
      test -f $FN && rm $FN
	  user=$(perl -ne 'print $1 if /^user\s*=\s*(\S+)/;' $CONFIG)
	  test -n "$user" && user="--chuid $user"
	  group=$(perl -ne 'print $1 if /^group\s*=\s*(\S+)/;' $CONFIG)
	  test -n "$group" && group="--group $group"
	  start-stop-daemon $VERBOSE --background $group $user --exec $BIN --start -- --daemon
  fi
}

function stop() {
  quiet=$1
  pid=$(getPid)
  if [ -z "$pid"  ] ; then
  	test -z $quiet && echo "not running: pywwetha"
  else
	  kill -TERM $pid
	  count=10
	  while [ $count ">" 0 ] ; do
	    pid=$(getPid)
	    test -z "$pid" && break
		count=$(expr $count - 1)
	  done
	  pid=$(getPid)
	  test -n "$pid" && kill -9 $pid
	  echo "pywwetha stopped"
  fi
}

function checkHosts(){
	rc=0
	pushd /etc/pywwetha/virtualhosts.d >/dev/null
	for file in * ; do
		if [ -f $file ] ; then
			# Correct constructs like abc.new-dist
			file=${file%%.*}
			if ! grep -q $file /etc/hosts ; then
				addHost $file
				rc=1
			fi
		fi
	done
	popd  >/dev/null
	test $rc -eq 1 && stop q
}

case "$1" in
start)
	checkHosts && stop q
    start
    ;;
stop)
    stop
    ;;
restart|force-reload)
    stop q
    start
    ;;
status)
    echo -n "Checking for pywwetha webserver"
    pid=$(getPid)
    if [ -n "$pid" ]; then
        echo " ...running"
    else
        echo " ...not running"
    fi
    ;;
check-config)
	$BIN --check-config
	;;
add-host)
	addHost $2
	;;
*)
    echo "Usage: $0 {start|stop|restart|force-reload|status|check-config}"
    exit 1
    ;;
esac

exit 0
